---
import BaseLayout from "../layouts/base-layout.astro";

type Technology = {
	name: string;
	url: string;
	note?: string;
};
const technologies: Record<string, Technology> = {
	Typescript: { name: "Typescript", url: "https://typescriptlang.org/" },
	MUI5: { name: "MUI", url: "https://mui.com/", note: "Version 5" },
	MUI4: { name: "MUI", url: "https://mui.com/", note: "Version 4" },
	React: { name: "React", url: "https://reactjs.org/" },
	ReactQuery: { name: "React-Query", url: "https://react-query.tanstack.com/" },
	ReactRouter5: {
		name: "React-Router",
		url: "reactrouter.com/",
		note: "Version 5",
	},
	ReactRouter6: {
		name: "React-Router",
		url: "reactrouter.com/",
		note: "Version 6",
	},
	MapboxGLJS: {
		name: "Mapbox GL JS",
		url: "https://mapbox.com/",
	},
	Tailwind3: {
		name: "Tailwind CSS",
		url: "https://tailwindcss.com/",
		note: "Version 3",
	},
	Astro: {
		name: "Astro",
		url: "https://astro.build/",
	},
	NetlifyCMS: {
		name: "Netlify CMS",
		url: "https://www.netlifycms.org/",
	},
};
type Project = {
	title: string;
	url?: string;
	comment: string;
	technologies: (keyof typeof technologies)[];
};
type ProjectGroup = {
	group: true;
	heading: string;
	projects: Project[];
};
const projects: (Project | ProjectGroup)[] = [
	{
		group: true,
		heading: "While working at CRISiSLab",
		projects: [
			{
				title: "2022 CRISiSLab challange earthquake simulation visulisation",
				url: "https://visualisation.pages.dev/",
				comment:
					"Designed and programmed entierly by me. For use in the 2022 CRISiSLab challange.",
				technologies: ["MapboxGLJS"],
			},
			{
				title: "CRISiSLab sensor management dashboard",
				url: "https://admin.crisislab.org.nz/",
				comment:
					"Website frontend (including authentication pages) desgined and programmed me.",
				technologies: [
					"MUI5",
					"ReactQuery",
					"ReactRouter6",
					"React",
					"Typescript",
				],
			},
			{
				title: "CRISiSLab shakemap",
				url: "https://shakemap.crisislab.org.nz/",
				comment: "Website frontend programmed in part by me.",
				technologies: ["MapboxGLJS", "MUI5", "ReactRouter6", "React"],
			},
			{
				title: "Old CRISiSLab shakemap",
				comment:
					"Original (No longer used) website frontend designed and programmed by me.",
				technologies: [
					"MapboxGLJS",
					"MUI5",
					"ReactQuery",
					"ReactRouter6",
					"React",
					"Typescript",
				],
			},
		],
	},
	{
		title: "St Paul's Lutheran Church Wellington website",
		url: "https://www.wellingtonlutheran.org.nz/",
		comment:
			"Website desgined and programmed me. Graphics made in Adobe Illustrator.",
		technologies: ["Tailwind3"],
	},
	{
		title: "Public Transport Forum New Zealand website",
		url: "https://publictransportforum.nz/",
		comment:
			"Website frontent, backend, and content managment system designed and programmed by me.",
		technologies: ["Astro", "NetlifyCMS", "Typescript"],
	},
	{
		title: "Wellington College Retail Simulation",
		url: "https://retailsimulation.co.nz/",
		comment: "Website frontend designed in part and programmed in part by me.",
		technologies: ["MUI4", "React"],
	},
];

function renderProjects(projects: (Project | ProjectGroup)[]) {
	return projects.map((project) => {
		if ("group" in project) {
			return `<li class="card-list-wrapper flow">
	<h3>${project.heading}.</h3>
	<ul class="card-list">
		${renderProjects(project.projects).join("\n")}
	</ul>
</li>`;
		} else {
			return `<li class="flow card">
	<h4>
		${
			project.url
				? `<a
			href="${project.url}"
			rel="noopener noreferrer">`
				: ""
		}
			${project.title}.
		${project.url ? `</a>` : ""}
	</h4>
	<p>
		${project.comment}
	</p>
	<p>
		Made using ${project.technologies
			.map((technologyID) => {
				const technology = technologies[technologyID];
				return `<a href="${technology.url}" rel="noopener noreferrer">${
					technology.name
				}</a>${technology.note ? ` (${technology.note})` : ""}`;
			})
			.join(", ")}.
	</p>
</li>`;
		}
	});
}
---

<BaseLayout title="Zade Viggers">
	<header class="flow">
		<h1>Hello, I'm Zade Viggers.</h1>
	</header>
	<main class="flow">
		<section class="flow">
			<h2>Thing's I've made:</h2>
			<aside>
				<em>
					Please note that while I built (or helped to build) these
					websites/apps/etc, I do not necessarily contribute to or endorse the
					content on them.
				</em>
			</aside>
			<ul class="card-list">
				<Fragment set:html={renderProjects(projects).join("\n")} />
			</ul>
		</section>
		<section class="flow">
			<h2>Contact me</h2>
			<dl>
				<dt>Discord</dt>
				<dd class="mono">ZV#1562</dd>
				<dt>Email</dt>
				<dd class="mono">Originally I had my email here, but I got too much spam, so now I have a <a href="/contact">contact form</a>.</dd>
			</dl>
		</section>
		<section class="flow">
			<h2>Other pages</h2>
			<dl>
				<dt><a href="/tools">/tools</a></dt>
				<dd>Some useful tools.</dd>
				<dt><a href="/interesting-things">/interesting-things</a></dt>
				<dd>Interesting things that I've discovered and written about.</dd>
			</dl>
		</section>
	</main>
</BaseLayout>

<style>
	:global(.card-list-wrapper) {
		padding: var(--spacing);
		border: 1px solid var(--normal-text-colour);
		/* TODO: figure out a way to stop this box from being too wide, without making it skinny on big screens, without using a media query */
		/* width: calc(500px + calc(var(--spacing) * 2)); */
	}
	:global(.card-list) {
		list-style-type: none;
		margin-left: 0;
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		gap: var(--spacing);
	}
	:global(.card) {
		padding: var(--spacing);
		border: 1px solid var(--normal-text-colour);
		max-width: 500px;
	}
</style>
